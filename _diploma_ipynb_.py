# -*- coding: utf-8 -*-
""""diploma.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PEP580HtDAL_7wuY-OVVfF7GGl0kqq9x
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras import layers, models
import numpy as np
import matplotlib.pyplot as plt

url = "https://raw.githubusercontent.com/daniel-dc-cd/data_science/master/module_4_ML/data/weatherAUS.csv"
df = pd.read_csv(url)

selected_features = ['BM', 'Pres', 'Temp', 'Humid', 'WS', 'WD', 'RR', 'Rain', 'DP', 'HI']

data = df[selected_features]
target = df['Temp']
X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_normalized = scaler.fit_transform(X_train)
X_test_normalized = scaler.transform(X_test)

def create_dense_model(input_shape):
    model = models.Sequential()
    model.add(layers.Dense(64, activation='relu', input_shape=(input_shape,)))
    model.add(layers.BatchNormalization())
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(32, activation='relu'))
    model.add(layers.BatchNormalization())
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(16, activation='relu'))
    model.add(layers.BatchNormalization())
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(1, activation='linear'))
    return model

input_shape = X_train_normalized.shape[1]

model = create_dense_model(input_shape)
model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train_normalized, y_train, epochs=50, batch_size=32, validation_split=0.2)

loss = model.evaluate(X_test_normalized, y_test)
print(f"Test Loss: {loss}")

# Прогноз на різний час вперед
forecast_horizons = [1, 2, 3, 6]
actual_data = y_test[:5]

plt.figure(figsize=(12, 8))

for i, horizon in enumerate(forecast_horizons):
    # Прогноз
    forecasted_data = []

    for j in range(horizon):
        input_data = new_data[-1].reshape(1, -1)  # Останній запис для прогнозування
        forecast = model.predict(input_data)[0, 0]
        forecasted_data.append(forecast)
        new_data = np.vstack([new_data, input_data])  # Додати прогнозовані дані назад для наступного прогнозу


    forecasted_data = np.array(forecasted_data)
    forecasted_data = (forecasted_data * scaler.scale_[-1]) + scaler.mean_[-1]

    # Графік
    plt.subplot(2, 2, i+1)
    plt.plot(range(1, horizon+1), forecasted_data, label=f'Forecast {horizon} hours')
    plt.plot(range(1, horizon+1), actual_data, label='Actual Data', linestyle='--', color='black')
    plt.title(f'Comparison at {horizon} hours ahead')
    plt.xlabel('Time')
    plt.ylabel('Temp')
    plt.legend()

plt.tight_layout()
plt.show()

